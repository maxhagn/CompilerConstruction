#! /bin/bash

beispiel=language
PROGRAM=./$beispiel

errnum=0
prgnum=0

# locations
ROOT_FOLDER=/home/maximilian/Projects/CompilerConstructionLLVM/
TEST_FOLDER=/home/maximilian/Projects/CompilerConstructionLLVM/Test
TEST_CASES_FOLDER=/home/maximilian/Projects/CompilerConstructionLLVM/Test/Cases

# colors
RED_COLOR='\033[0;31m'
GREEN_COLOR='\033[0;32m'
PURPLE_COLOR='\033[0;35m'
NO_COLOR='\033[0m'

# shellcheck disable=SC2034
allow_null_glob_expansion=1

# search and change directory to the project root
if [ ! -d $ROOT_FOLDER ]; then
  echo -e "${RED_COLOR}Error:${NO_COLOR} couldn't find root directory!${NO_COLOR}"
  exit 1
else
  echo -e "Success: root directory found"
  cd $ROOT_FOLDER || exit
  echo -e "Success: changed directory to root"
  echo 'call make clean'
  make clean
  echo -e "Success: make clean done"
  echo 'call make'
  make
  echo -e "Success: make done"
fi

# check if executable was generated by make
if test ! -x $PROGRAM; then
  echo -e "${RED_COLOR}Error:${NO_COLOR} couldn't find executable $PROGRAM"
  exit 1
else
  echo -e "Success: executable was generated"
fi

let prgnum=0

for i in $TEST_FOLDER/*/*.0 $TEST_CASES_FOLDER/*/*.0 $TEST_FOLDER/*/*.xin $TEST_CASES_FOLDER/*/*.xin; do
  if [ -f $i ]; then
    let prgnum=prgnum+1
    let HAS_ERROR=0
    echo -e "${PURPLE_COLOR}started test case${NO_COLOR}: $i"
    cat $i
    echo
    RESFILE=test${beispiel}out$$
    $PROGRAM <$i >$RESFILE
    retval=$?
    if test $retval -eq 0; then
      echo -e "Success: program terminated with code 0 as expected"
    else
      echo -e "${RED_COLOR}Error:${NO_COLOR} status was $retval but 0 was expected"
      let HAS_ERROR=1
    fi
    CALLFILE=${i%.*}.call
    if [ ! -f $CALLFILE ]; then
      echo -e "${RED_COLOR}Error:${NO_COLOR} test case incomplete, missing file $CALLFILE"
      exit 1
    else
      echo -e "Success: $CALLFILE was found"
      echo -e "compile and link the test program"

      # check if compilation and linking was successful
      if cc -fno-pie -no-pie -g -I. -DCALL=\"$CALLFILE\" $TEST_FOLDER/testmain.c $TEST_FOLDER/callingconvention.o output.s; then
        echo -e "Success: program was linked"
        echo
        echo "calling function with following parameters:"
        cat $CALLFILE
        echo
        echo
        ./a.out
        retval=$?

        # test callee saved registers
        if [ "$retval" -ge 12 ] && [ "$retval" -le 15 ]; then
          echo "[Error] Callee-saved register %r$retval modified."
          let HAS_ERROR=1
        elif [ "$retval" -eq 11 ]; then
          echo "[Error] Callee-saved register %rbx modified."
          let HAS_ERROR=1
        elif [ "$retval" -eq 16 ]; then
          echo "[Error] Callee-saved register %rbp modified."
          let HAS_ERROR=1
        elif [ "$retval" -eq 30 ]; then
          echo "[Error] Stack pointer %rsp modified."
          let HAS_ERROR=1
        else
          # test signals
          test $retval -gt 127
          retsig=$?
          test ${i##*.} = xin
          expsig=$?
          if test $retsig -eq $expsig; then

            echo -e "Success: signal creation behaves like expected"

            if test $retval -eq 1; then
              echo -e "${RED_COLOR}Error:${NO_COLOR} the result was wrong"
              echo -e "${RED_COLOR}TEST FAILED${NO_COLOR}"
              let HAS_ERROR=1
            else
              echo -e "Success: the result is equal to the desired value"
              echo -e "${GREEN_COLOR}TEST PASSED${NO_COLOR}"
            fi
          else
            echo -e "${RED_COLOR}Error:${NO_COLOR} signal creation not as expected"
            echo -e "${RED_COLOR}TEST FAILED${NO_COLOR}"
            let HAS_ERROR=1
          fi
        fi
        echo
      else
        echo -e "${RED_COLOR}Error:${NO_COLOR} the code couldn't be assembled and linked"
        echo -e "${RED_COLOR}TEST FAILED${NO_COLOR}"
        echo
        let HAS_ERROR=1
      fi
    fi
    let errnum=errnum+HAS_ERROR
    rm -f a.out $RESFILE $RESFILE.s
  fi
done

let corrnum=prgnum-errnum

echo "======================"
echo "      Statistics "
echo "======================"
echo "           $prgnum Tests total"
echo "           $corrnum Tests passed"
echo "           $errnum Tests failed"
